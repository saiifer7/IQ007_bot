from PIL import Image
import logging
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import *
import asyncio
import os
from dotenv import load_dotenv
from database import get_user, set_user, find_user_by_username

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

ALLOWED_ADMINS = [229210929]
admin_states = {}

characters = {
    "knight": {"name": "–†—ã—Ü–∞—Ä—å –õ–∏—Å"},
    "fairy": {"name": "–§–µ—è –õ–∏—Å–∞"},
    "dwarf": {"name": "–ì–Ω–æ–º –õ–∏—Å"},
    "elf": {"name": "–≠–ª—å—Ñ –õ–∏—Å–∞"},
    "wizard": {"name": "–í–æ–ª—à–µ–±–Ω–∏–∫ –õ–∏—Å"},
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫–∞—á–∫–∏ XP –∏ —É—Ä–æ–≤–Ω—è
def add_xp(user, amount):
    user["xp"] += amount
    while user["xp"] >= 100 and user["level"] < 5:
        user["xp"] -= 100
        user["level"] += 1
    return user

def get_main_menu(is_admin=False, user_data=None):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

    keyboard.add(KeyboardButton("ü¶∏üèª –ú–æ–π –≥–µ—Ä–æ–π"))

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏ —à–∫–æ–ª—ã
    if user_data:
        level = user_data.get("school_level", 0)
        if level < 3:
            cost_map = {0: 50, 1: 150, 2: 300}
            cost = cost_map[level]
            keyboard.add(KeyboardButton(f"üè´ –ü—Ä–æ–∫–∞—á–∞—Ç—å —à–∫–æ–ª—É ({cost} –∫–æ–∏–Ω–æ–≤)"))
        else:
            keyboard.add(KeyboardButton("üè´ –®–∫–æ–ª–∞ –ø—Ä–æ–∫–∞—á–∞–Ω–∞ –Ω–∞ –º–∞–∫—Å–∏–º—É–º!"))
        
        # –ö–Ω–æ–ø–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
        keyboard.add(KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π"))

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–Ω—è
        today = str(datetime.now().date())
        if user_data.get("last_reward_date") == today:
            keyboard.add(KeyboardButton("üéÅ –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"))
        else:
            keyboard.add(KeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –¥–Ω—è"))
    else:
        keyboard.add(KeyboardButton("üè´ –ü—Ä–æ–∫–∞—á–∞—Ç—å —à–∫–æ–ª—É"))
        keyboard.add(KeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –¥–Ω—è"))

    keyboard.add(KeyboardButton("üÜî –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID"))
    if is_admin:
        keyboard.add(KeyboardButton("üë©‚Äçüè´ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))

    return keyboard

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    user = get_user(user_id)
    if user:
        await message.answer("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –Ω–µ–ª—å–∑—è, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id in ALLOWED_ADMINS, user))
        return

   
        await message.answer(
    """–ü—Ä–∏–≤–µ—Ç!

–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π 5 –≥–µ—Ä–æ–µ–≤. –¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∂–¥–æ–≥–æ –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≥–æ, –∫—Ç–æ —Ç–µ–±–µ –ø–æ –¥—É—à–µ.
–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥–µ—Ä–æ—è —Ç—ã —É–∂–µ –Ω–µ —Å–º–æ–∂–µ—à—å –µ–≥–æ –ø–æ–º–µ–Ω—è—Ç—å, —Ç–∞–∫ —á—Ç–æ –≤—ã–±–∏—Ä–∞–π —Å —É–º–æ–º!

*–ù–∞–∂–º–∏ ¬´–ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨ –ì–ï–†–û–Ø ‚úÖ¬ª –ø–æ–¥ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–º—Å—è.*""",
    parse_mode="Markdown"
    )

    for key, value in characters.items():
        img_path = f"characters/{key}_lvl1.png"
        try:
            img = InputFile(img_path)
        except:
            continue

        descriptions = {
            "knight": "üõ°Ô∏è *–°–º–µ–ª—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫ –∑–Ω–∞–Ω–∏–π.*\n–û–Ω –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –ª–µ–Ω—å—é –∏ —Å–∫—É–∫–æ–π.",
            "fairy": "üßö *–í–æ–ª—à–µ–±–Ω–∏—Ü–∞ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è.*\n–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∑–∞–Ω—è—Ç–∏—è –≤ —Å–∫–∞–∑–æ—á–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.",
            "dwarf": "‚õèÔ∏è *–ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π –º–∞—Å—Ç–µ—Ä.*\n–®–∞–≥ –∑–∞ —à–∞–≥–æ–º —Å—Ç—Ä–æ–∏—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –∑–Ω–∞–Ω–∏–π.",
            "elf":   "üèπ *–ë—ã—Å—Ç—Ä–∞—è –∏ –º—É–¥—Ä–∞—è.*\n–ü–æ–º–æ–≥–∞–µ—Ç —Ç–æ—á–Ω–æ –ø–æ–ø–∞–¥–∞—Ç—å –≤ —Ü–µ–ª—å –∏ –±—ã—Å—Ç—Ä–æ –º—ã—Å–ª–∏—Ç—å.",
            "wizard":"ü™Ñ *–•—Ä–∞–Ω–∏—Ç–µ–ª—å –≤–µ–ª–∏–∫–∏—Ö —Ç–∞–π–Ω.*\n–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç."
        }

        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨ –ì–ï–†–û–Ø ‚úÖ", callback_data=f"activate_{key}")
        )

        await message.answer_photo(
            photo=img,
            caption=descriptions[key],
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

        await asyncio.sleep(7)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("activate_"))
async def activate_character(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    user = get_user(user_id)

    if user:
        await callback_query.answer("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –≥–µ—Ä–æ—è.")
        return

    char_key = callback_query.data.split("_")[1]

    user_data = {
        "character": char_key,
        "level": 1,
        "xp": 0,
        "coins": 0,
        "school_level": 0,
        "last_reward_date": None,
        "username": username
    }

    set_user(user_id, user_data)

    await bot.answer_callback_query(callback_query.id)

    await bot.send_message(user_id, f"–ì–µ—Ä–æ–π *{characters[char_key]['name']}* —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–í–ø–µ—Ä—ë–¥ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!", parse_mode="Markdown")

    tutorial = [
        "–£—Ä–∞! –¢–µ–ø–µ—Ä—å —Ç—ã ‚Äî –≥–µ—Ä–æ–π —à–∫–æ–ª—ã IQ007!\n–¢—ã –≤—ã–±—Ä–∞–ª —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç ‚Äî –ø–æ—Ä–∞ –≤ –ø—É—Ç—å!",
        "–ö–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ ‚Äî —ç—Ç–æ —à–∞–≥ –∫ –ø–æ–±–µ–¥–µ!\n–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å ‚≠ê XP –∏ üí∞ –∫–æ–∏–Ω—ã.",
        "XP –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å –≥–µ—Ä–æ—è ‚Äî —Ç—ã —Ä–∞—Å—Ç—ë—à—å –≤ —É—Ä–æ–≤–Ω—è—Ö –∏ —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ!",
        "–ê –∫–æ–∏–Ω—ã –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø—Ä–æ–∫–∞—á–∫—É —à–∫–æ–ª—ã ‚Äî –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥!",
        "–ê —Ç–µ–ø–µ—Ä—å ‚Äî –∑–∞–≥–ª—è–Ω–µ–º –∫ —Ç–≤–æ–µ–º—É –≥–µ—Ä–æ—é!"
    ]

    for msg in tutorial:
        await asyncio.sleep(2.5)
        await bot.send_message(user_id, msg)

    await handle_status(callback_query.message)

from PIL import Image

@dp.message_handler(lambda message: message.text == "ü¶∏üèª –ú–æ–π –≥–µ—Ä–æ–π")
async def handle_status(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /start.")
        return

    char_key = user["character"]
    level = min(user["level"], 5)
    base_path = f"characters/{char_key}_lvl{level}.png"

    try:
        base = Image.open(base_path).convert("RGBA")

        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for item_id in user.get("items", []):
            try:
                overlay = Image.open(shop_items[item_id]["image"]).convert("RGBA")
                base.alpha_composite(overlay)
            except:
                continue

        final_path = f"temp/{user_id}_final.png"
        os.makedirs("temp", exist_ok=True)
        base.save(final_path)
        img = InputFile(final_path)
    except:
        await message.answer("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    char_emojis = {
        "knight": "üõ°Ô∏è",
        "fairy": "üßö",
        "dwarf": "‚õèÔ∏è",
        "elf": "üèπ",
        "wizard": "ü™Ñ"
    }
    emoji = char_emojis.get(char_key, "üéÆ")

    xp_bar = "[" + "‚ñà" * (user["xp"] % 100 // 10) + "‚ñë" * (10 - (user["xp"] % 100 // 10)) + "]"
    school_level = user["school_level"]
    school_stars = "‚≠êÔ∏è" * school_level + "‚òÖ" * (3 - school_level)
    coins_per_lesson = 10 + user["level"] * 5 + user["school_level"] * 5

    text = (
        f"{emoji} *{characters[char_key]['name']}*\n"
        f"üÜô –£—Ä–æ–≤–µ–Ω—å: *{user['level']}*\n"
        f"üí´ –û–ø—ã—Ç: *{user['xp']}* {xp_bar}\n"
        f"üí∞ –ö–æ–∏–Ω—ã: *{user['coins']}*\n"
        f"üè´ –£—Ä–æ–≤–µ–Ω—å —à–∫–æ–ª—ã: {school_stars}\n\n"
        f"‚ûï –ó–∞ 1 —É—Ä–æ–∫: *+10 XP*, *+{coins_per_lesson} –∫–æ–∏–Ω–æ–≤*"
    )

    await message.answer_photo(photo=img, caption=text, parse_mode="Markdown", reply_markup=get_main_menu(user_id in ALLOWED_ADMINS, user))

@dp.message_handler(lambda msg: msg.text.startswith("üè´ –ü—Ä–æ–∫–∞—á–∞—Ç—å —à–∫–æ–ª—É"))
async def upgrade_school(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return

    level = user["school_level"]
    cost_map = {0: 50, 1: 150, 2: 300}

    if level >= 3:
        await message.answer("–¢–≤–æ—è —à–∫–æ–ª–∞ —É–∂–µ –ø—Ä–æ–∫–∞—á–∞–Ω–∞ –Ω–∞ –º–∞–∫—Å–∏–º—É–º! ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è")
        return

    cost = cost_map[level]
    if user["coins"] < cost:
        await message.answer(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–∏–Ω–æ–≤. –ù—É–∂–Ω–æ {cost}, —É —Ç–µ–±—è {user['coins']}.")
        return

    user["coins"] -= cost
    user["school_level"] += 1
    set_user(user_id, user)
    await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –®–∫–æ–ª–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ —É—Ä–æ–≤–Ω—è {user['school_level']}!", reply_markup=get_main_menu(user_id in ALLOWED_ADMINS, user))

@dp.message_handler(lambda message: message.text.startswith("üéÅ"))
async def daily_reward(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return

    today = str(datetime.now().date())
    if user.get("last_reward_date") == today:
        await message.answer("–¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è.", reply_markup=get_main_menu(user_id in ALLOWED_ADMINS, user))
        return

    result = random.choice(["xp", "coins", "nothing"])
    if result == "xp":
        xp = random.randint(1, 7)
        user = add_xp(user, xp)
        msg = f"–¢—ã –ø–æ–ª—É—á–∏–ª {xp} XP!"
    elif result == "coins":
        coins = random.randint(1, 7)
        user["coins"] += coins
        msg = f"–¢—ã –ø–æ–ª—É—á–∏–ª {coins} –∫–æ–∏–Ω–æ–≤!"
    else:
        msg = "–°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ."

    user["last_reward_date"] = today
    set_user(user_id, user)
    await message.answer(msg, reply_markup=get_main_menu(user_id in ALLOWED_ADMINS, user))

@dp.message_handler(lambda message: message.text == "üÜî –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID")
async def show_id(message: types.Message):
    await message.answer(f"–¢–≤–æ–π Telegram ID: `{message.from_user.id}`", parse_mode='Markdown')

@dp.message_handler(lambda msg: msg.text == "üë©‚Äçüè´ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ALLOWED_ADMINS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.answer("–í–≤–µ–¥–∏ username —É—á–µ–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–±–µ–∑ @):")
    admin_states[message.from_user.id] = {"mode": "awaiting_usernames"}

@dp.message_handler(lambda msg: admin_states.get(msg.from_user.id, {}).get("mode") == "awaiting_usernames")
async def handle_bulk_usernames(message: types.Message):
    admin_id = message.from_user.id
    input_text = message.text.replace("\n", " ").replace("@", "").strip()
    usernames = [u.strip() for u in input_text.split() if u.strip()]

    found_users = []
    for username in usernames:
        uid, user = find_user_by_username(username)
        if uid and user:
            found_users.append((uid, username, user))

    if not found_users:
        await message.answer("–ù–∏ –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        admin_states.pop(admin_id, None)
        return

    text_lines = [f"–ù–∞–π–¥–µ–Ω–æ {len(found_users)} —É—á–µ–Ω–∏–∫–æ–≤:"]
    for _, username, user in found_users:
        text_lines.append(
            f"@{username}: —É—Ä–æ–≤–µ–Ω—å {user['level']}, XP: {user['xp']}, –∫–æ–∏–Ω—ã: {user['coins']}, —à–∫–æ–ª–∞: {user['school_level']}"
        )

    admin_states[admin_id] = {
        "mode": "bulk_selected",
        "students": found_users
    }

    await message.answer(
        "\n".join(text_lines),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("‚úÖ –ù–∞—á–∏—Å–ª–∏—Ç—å XP –∏ –∫–æ–∏–Ω—ã –≤—Å–µ–º", callback_data="admin_bulk_reward")],
            [InlineKeyboardButton("‚ùå –°–ø–∏—Å–∞—Ç—å –∫–æ–∏–Ω—ã —É –≤—Å–µ—Ö", callback_data="admin_bulk_deduct")]
        ])
    )

@dp.callback_query_handler(lambda c: c.data in ["admin_bulk_reward", "admin_bulk_deduct"])
async def handle_bulk_action(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    state = admin_states.get(admin_id)
    if not state or state["mode"] != "bulk_selected":
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
        return

    students = state["students"]

    if callback.data == "admin_bulk_reward":
        for uid, _, user in students:
            coins = 10 + user["level"] * 5 + user["school_level"] * 5
            user["coins"] += coins
            user = add_xp(user, 10)
            set_user(uid, user)
            try:
                await bot.send_message(uid, f"–¢—ã –ø–æ–ª—É—á–∏–ª +10 XP –∏ +{coins} –∫–æ–∏–Ω–æ–≤ –∑–∞ —É—Ä–æ–∫!")
            except:
                pass
        await callback.message.answer("–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º.")
        admin_states.pop(admin_id, None)

    elif callback.data == "admin_bulk_deduct":
        state["mode"] = "awaiting_bulk_deduction"
        await bot.send_message(admin_id, "–°–∫–æ–ª—å–∫–æ –∫–æ–∏–Ω–æ–≤ —Å–ø–∏—Å–∞—Ç—å —É –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞?")

@dp.message_handler(lambda msg: admin_states.get(msg.from_user.id, {}).get("mode") == "awaiting_bulk_deduction")
async def handle_bulk_deduction_amount(message: types.Message):
    admin_id = message.from_user.id
    state = admin_states.get(admin_id)
    students = state["students"]

    try:
        amount = int(message.text.strip())
    except:
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ.")
        return

    for uid, _, user in students:
        user["coins"] = max(0, user["coins"] - amount)
        set_user(uid, user)
        try:
            await bot.send_message(uid, f"–£ —Ç–µ–±—è —Å–ø–∏—Å–∞–ª–∏ {amount} –∫–æ–∏–Ω–æ–≤.")
        except:
            pass

    await message.answer(f"–£ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Å–ø–∏—Å–∞–Ω–æ {amount} –∫–æ–∏–Ω–æ–≤.")
    admin_states.pop(admin_id, None)

from shop_data import shop_items

@dp.message_handler(lambda message: message.text == "üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π")
async def open_shop(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return

    for item_id, item in shop_items.items():
        text = f"{item['name']}\n–¶–µ–Ω–∞: {item['price']} –∫–æ–∏–Ω–æ–≤\n{item['description']}"
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buy_{item_id}")
        )
        try:
            photo = InputFile(item["image"])
            await message.answer_photo(photo=photo, caption=text, reply_markup=keyboard)
        except:
            await message.answer(text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("buy_"))
async def buy_item(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = get_user(user_id)
    if not user:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return

    item_id = callback_query.data.split("_", 1)[1]
    item = shop_items.get(item_id)
    if not item:
        await callback_query.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if item_id in user.get("items", []):
        await callback_query.answer("–¢—ã —É–∂–µ –∫—É–ø–∏–ª —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç.")
        return

    if user["coins"] < item["price"]:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤.")
        return

    user["coins"] -= item["price"]
    user.setdefault("items", []).append(item_id)
    set_user(user_id, user)

    await callback_query.answer(f"–¢—ã –∫—É–ø–∏–ª: {item['name']}!")
    await bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n{item['name']} —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–π.", reply_markup=get_main_menu(user_id in ALLOWED_ADMINS, user))

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
